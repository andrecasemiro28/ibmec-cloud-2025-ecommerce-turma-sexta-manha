# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

from botbuilder.dialogs import (
    ComponentDialog,
    WaterfallDialog,
    WaterfallStepContext,
    DialogTurnResult,
)
from botbuilder.dialogs.prompts import (
    ChoicePrompt,
    PromptOptions,
)
from botbuilder.dialogs.choices import Choice
from botbuilder.core import MessageFactory, UserState

# Importa os di√°logos espec√≠ficos
from dialogs.consultar_produtos_dialog import ConsultarProdutosDialog
from dialogs.consultar_pedidos_dialog import ConsultarPedidosDialog
from dialogs.extrato_compra_dialog import ExtratoCompraDialog

class MainDialog(ComponentDialog):
    """
    Di√°logo principal que apresenta o menu de op√ß√µes para o usu√°rio
    """
    
    def __init__(self, user_state: UserState):
        super(MainDialog, self).__init__(MainDialog.__name__)

        self.user_state = user_state

        # Adiciona os di√°logos espec√≠ficos para cada funcionalidade
        self.add_dialog(ConsultarProdutosDialog(user_state))
        self.add_dialog(ConsultarPedidosDialog())
        self.add_dialog(ExtratoCompraDialog())

        # Adiciona o di√°logo principal (waterfall)
        self.add_dialog(
            WaterfallDialog(
                WaterfallDialog.__name__,
                [
                    self.prompt_option_step,
                    self.process_option_step,
                    self.restart_step
                ],
            )
        )

        # Adiciona o prompt de escolha
        self.add_dialog(ChoicePrompt(ChoicePrompt.__name__))

        # Define o di√°logo inicial
        self.initial_dialog_id = WaterfallDialog.__name__

    async def prompt_option_step(self, step_context: WaterfallStepContext) -> DialogTurnResult:
        """
        Apresenta o menu principal de op√ß√µes para o usu√°rio
        """
        return await step_context.prompt(
            ChoicePrompt.__name__,
            PromptOptions(
                prompt=MessageFactory.text(
                    "üõçÔ∏è **IBMEC MALL - Menu Principal**\n\n"
                    "Escolha uma das op√ß√µes abaixo:"
                ),
                choices=[
                    Choice("üîç Consultar Produtos"), 
                    Choice("üì¶ Consultar Pedidos"), 
                    Choice("üí≥ Extrato de Compras")
                ],
            ),
        )

    async def process_option_step(self, step_context: WaterfallStepContext) -> DialogTurnResult:
        """
        Processa a op√ß√£o escolhida pelo usu√°rio e inicia o di√°logo correspondente
        """
        option = step_context.result.value

        if option == "üîç Consultar Produtos":
            # Inicia o di√°logo de consulta de produtos
            return await step_context.begin_dialog("ConsultarProdutosDialog")
            
        elif option == "üì¶ Consultar Pedidos":
            # Inicia o di√°logo de consulta de pedidos
            return await step_context.begin_dialog("ConsultarPedidosDialog")
            
        elif option == "üí≥ Extrato de Compras":
            # Inicia o di√°logo de extrato de compras
            return await step_context.begin_dialog("ExtratoCompraDialog")

        # Se chegou aqui, algo deu errado
        await step_context.context.send_activity(
            MessageFactory.text("‚ùå Op√ß√£o n√£o reconhecida. Tente novamente.")
        )
        return await step_context.end_dialog()

    async def restart_step(self, step_context: WaterfallStepContext) -> DialogTurnResult:
        """
        Ap√≥s completar uma a√ß√£o, oferece voltar ao menu principal
        """
        await step_context.context.send_activity(
            MessageFactory.text(
                "‚úÖ Opera√ß√£o conclu√≠da!\n\n"
                "üí¨ Digite qualquer mensagem para voltar ao menu principal."
            )
        )
        
        # Termina este di√°logo, o que far√° o bot voltar ao in√≠cio
        return await step_context.end_dialog()